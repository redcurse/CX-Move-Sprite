package LoopLimiter

type LoopLimiter struct {
    previousTime f64
    delta f64
    limit i32
    limitReached bool
    enabled bool
}

func create(limit i32, enabled bool) (limiter LoopLimiter) {
    str.print("LoopLimiter.create()")
    
    limiter.limit = limit
    limiter.enabled = enabled
}

func update(limiter LoopLimiter, currentTime f64) (loopLimiter LoopLimiter) {
    if limiter.enabled {
        var fractionOfSecond f64 = f64.div(1.0D, i32.f64(limiter.limit))
        
        var td f64 // temp delta
        td = f64.sub(currentTime, limiter.previousTime)
        td = f64.div(td, fractionOfSecond)
        td = f64.add(td, limiter.delta)
        
        limiter.delta = td
        limiter.previousTime = currentTime

        if limiter.delta >= 1.0D {
            limiter.limitReached = true
            limiter.delta = f64.sub(limiter.delta, 1.0D)
        } else {
            limiter.limitReached = false
        }
    } else {
        limiter.limitReached = true
    }

    loopLimiter = limiter
}