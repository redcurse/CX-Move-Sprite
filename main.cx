package main

import "glfw"
import "gl"
import "os"

import "LoopLimiter"
import "LoopTracker"

var upPressed bool
var downPressed bool
var leftPressed bool
var rightPressed bool

type Vector2D struct {
    x f32
    y f32
}

type Window struct {
    Height i32
    Width i32
}

// *************************************
// Start - Game
// *************************************
var currentTime f64
var loopLimiter LoopLimiter.LoopLimiter = LoopLimiter.create(60, true)
var animationLimiter LoopLimiter.LoopLimiter = LoopLimiter.create(5, true)
var loopTracker LoopTracker.LoopTracker = LoopTracker.create(1.0D, "Main")

func initGlfw(window Window) {
    glfw.Init()
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.CreateWindow("window", window.Width, window.Height, "SynthCat Brick Breaker")
    glfw.MakeContextCurrent("window")

    glfw.SetKeyCallback("window", "keyEventCallback")
}

func keyEventCallback(window str, key i32, scancode i32, action i32, mods i32) {
    // Up
    if key == 265 && action == 1 {
		upPressed = true
	} else if key == 265 && action == 0 {
		upPressed = false
    }
    
    // Down
    if key == 264 && action == 1 {
		downPressed = true
	} else if key == 264 && action == 0 {
		downPressed = false
    }

    // Left
    if key == 263 && action == 1 {
		leftPressed = true
	} else if key == 263 && action == 0 {
		leftPressed = false
    }

    // Right
    if key == 262 && action == 1 {
		rightPressed = true
	} else if key == 262 && action == 0 {
		rightPressed = false
    }
}

func startGame() {
    mainGameLoop()
}

func mainGameLoop()() {
    var program i32 = gl.CreateProgram()
    initSprites()
    synthCat.position.y = 0.8
    yarnBall.position.x = 0.0
    yarnBall.position.y = -0.8
    yarnBall.velocity.y = 0.3
    yarnBall.velocity.x = 0.6

    for bool.not(glfw.ShouldClose("window")) {
        currentTime = glfw.GetTime()
        loopLimiter = LoopLimiter.update(loopLimiter, currentTime)
        animationLimiter = LoopLimiter.update(animationLimiter, currentTime)
        loopTracker = LoopTracker.update(loopTracker, currentTime)

        synthCat = updatePlayer(synthCat)
        yarnBall = updateBall(yarnBall)
        checkBrickCollisions()

        synthCat = updateSprite(synthCat)
        yarnBall = updateSprite(yarnBall)

        if loopLimiter.limitReached {
            gl.UseProgram(program)
            gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))
            gl.Enable(gl.TEXTURE_2D)
            gl.Disable(gl.DITHER)
            gl.Disable(gl.POINT_SMOOTH)
            gl.Disable(gl.LINE_SMOOTH)
            gl.Disable(gl.POLYGON_SMOOTH)
            gl.Hint(gl.POINT_SMOOTH, gl.DONT_CARE)
            gl.Hint(gl.LINE_SMOOTH, gl.DONT_CARE)
            gl.Hint(gl.POLYGON_SMOOTH_HINT, gl.DONT_CARE)
            gl.Disable(gl.MULTISAMPLE_ARB)
            
            gl.TexEnvi(gl.TEXTURE_ENV, gl.TEXTURE_ENV_MODE, gl.MODULATE)
            gl.Disable(gl.DEPTH_TEST)

            gl.ClearColor(1.0, 1.0, 1.0, 1.0)
            gl.ClearDepth(1.0D)
            gl.DepthFunc(gl.LEQUAL)
            
            gl.Enable(gl.BLEND)
            gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
            gl.DepthMask(true)

            gl.MatrixMode(gl.PROJECTION)
            gl.LoadIdentity()

            gl.MatrixMode(gl.MODELVIEW)
            gl.LoadIdentity()

            drawSprite(background)
            drawSprite(synthCat)
            drawSprite(yarnBall)

            var brick Sprite

            for i:=0; i<len(bricks); i=i+1{
                brick = bricks[i]
                if brick.brickHit == false {
                    drawSprite(brick)
                }
            }
                        
            glfw.PollEvents()
            glfw.SwapBuffers("window")
        }
    }
}

func updatePlayer(player Sprite)(out Sprite) {
    if rightPressed == true {
        player.velocity.x = player.maxVelocity
    } 
    if leftPressed == true {
        player.velocity.x = -1.0*player.maxVelocity
    } 
    if rightPressed == false && leftPressed == false {
        player.velocity.x = 0.0
    }
    player.lastPosition = player.position
    out = player
}

func updateBall(ball Sprite)(out Sprite) {
    if ball.position.x >= 0.9 || ball.position.x <= -0.9 {
        ball.velocity.x = ball.velocity.x*-1.0
        if ball.position.x > 0.9 {
            ball.position.x = 0.9
        } else {
            ball.position.x = -0.9
        }
    }
    
    if ball.position.y >= 0.9 || ball.position.y <= -0.9 {
        ball.velocity.y = ball.velocity.y*-1.0
        if ball.position.y > 0.9 {
            ball.position.y = 0.9
        } else {
            ball.position.y = -0.9
        }
    }

    if spriteTop(ball) > spriteBottom(synthCat) && spriteLastTop(ball) < spriteLastBottom(synthCat) {
        if spriteRight(ball) >= spriteLeft(synthCat) && spriteLeft(ball) <= spriteRight(synthCat) {
            ball.position.y = spriteBottom(synthCat) - ball.height / 2.0
            ball.velocity.y = ball.velocity.y*-1.0
        }
    }

    ball.lastPosition = ball.position
    out = ball
}

func main() {
    var window Window
    window = Window{ Width: 1024, Height: 768 }

    initGlfw(window)
    gl.Init()

    startGame()
}

// *************************************
// End - Game
// *************************************