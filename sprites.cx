package main

type Sprite struct {
    position Vector2D
    lastPosition Vector2D
    velocity Vector2D
    acceleration f32
    maxVelocity f32
    width f32
    height f32
    frames []i32
    currentFrame i32
    brickHit bool
}

var background Sprite
var synthCat Sprite
var yarnBall Sprite
var bricks []Sprite

func initSprites() {
    background = createBackgroundSprite()
    synthCat  = createSynthCatSprite()
    yarnBall = createYarnBallSprite()

    initBricks()
}

func initBricks() {
    var startPos Vector2D
    var increment f32
    increment = 128.0 / 1024.0
    startPos.x = -0.55
    startPos.y = -0.6

    for i:=0; i<8; i=i+1 {
        startPos.x = startPos.x + increment
        bricks = append(bricks, createBrickSprite(startPos))
    }
}

func getTexture(textureFileName str)(texture i32) {
    var workingDirectory str = os.GetWorkingDirectory()

    texture = gl.NewTexture(str.concat(workingDirectory, textureFileName))
}

func spriteTop(sprite Sprite) (out f32) {
    out = f32.add(sprite.position.y, f32.div(sprite.height, 2.0))
}

func spriteBottom(sprite Sprite)(out f32) {
    out = f32.sub(sprite.position.y, f32.div(sprite.height, 2.0))
}

func spriteRight(sprite Sprite)(out f32) {
    out = f32.add(sprite.position.x, f32.div(sprite.width, 2.0))
}

func spriteLeft(sprite Sprite)(out f32) {
    out = f32.sub(sprite.position.x, f32.div(sprite.width, 2.0))
}

func spriteLastTop(sprite Sprite)(out f32) {
    out = f32.add(sprite.lastPosition.y, f32.div(sprite.height, 2.0))
}

func spriteLastBottom(sprite Sprite)(out f32) {
    out = f32.sub(sprite.lastPosition.y, f32.div(sprite.height, 2.0))
}

func spriteLastRight(sprite Sprite)(out f32) {
    out = f32.add(sprite.lastPosition.x, f32.div(sprite.width, 2.0))
}

func spriteLastLeft(sprite Sprite)(out f32) {
    out = f32.sub(sprite.lastPosition.x, f32.div(sprite.width, 2.0))
}

func createBackgroundSprite()(background Sprite) {
    background.width = 1600.0 / 1024.0
    background.height = 1600.0 / 768.0

    background.frames = append(background.frames, getTexture("textures/background.png"))
}

func createSynthCatSprite()(synthCat Sprite) {
    synthCat.acceleration = 1.0
    synthCat.maxVelocity = 1.0
    synthCat.width = 200.0 / 1024.0
    synthCat.height = 200.0 / 768.0

    synthCat.frames = append(synthCat.frames, getTexture("textures/synth_cat.png"))
}

func createYarnBallSprite()(yarnBall Sprite) {
    yarnBall.acceleration = 1.0
    yarnBall.maxVelocity = 1.0
    yarnBall.width = 64.0 / 1024.0
    yarnBall.height = 64.0 / 768.0

    yarnBall.frames = append(yarnBall.frames, getTexture("textures/yarnBall0.png"))
    yarnBall.frames = append(yarnBall.frames, getTexture("textures/yarnBall1.png"))
    yarnBall.frames = append(yarnBall.frames, getTexture("textures/yarnBall2.png"))
    yarnBall.frames = append(yarnBall.frames, getTexture("textures/yarnBall3.png"))
}

func createBrickSprite(position Vector2D)(brick Sprite) {
    brick.position = position
    brick.width = 128.0 / 1024.0
    brick.height = 64.0 / 768.0

    brick.frames = append(brick.frames, getTexture("textures/brick.png"))
}

func updateSprite(sprite Sprite) (out Sprite) {
    // move deltas
    var dX f32 = f32.mul(sprite.velocity.x, f64.f32(loopTracker.deltaTime))
    var dY f32 = f32.mul(sprite.velocity.y, f64.f32(loopTracker.deltaTime))
    
    sprite.position.x = sprite.position.x + dX
    sprite.position.y = sprite.position.y + dY
    out = sprite
}

func drawSprites(sprites []Sprite) {
    for i := 0; i < len(sprites); i = i + 1 {
        drawSprite(sprites[i])
    }
}

func drawSprite(sprite Sprite) {
    var width f32
    var height f32
    var frame i32

    width = sprite.width
    height = sprite.height
    
    if animationLimiter.limitReached {
        if sprite.currentFrame < len(sprite.frames) - 1 {
            sprite.currentFrame = sprite.currentFrame + 1
        } else {
            sprite.currentFrame = 0
        }
    }

    frame = sprite.frames[sprite.currentFrame]

    draw(sprite.position.x, sprite.position.y, width, height, frame)
}

func draw(xCoord f32, yCoord f32, width f32, height f32, texture i32) {
	gl.MatrixMode(gl.MODELVIEW)
	gl.LoadIdentity()
    gl.Translatef(xCoord, yCoord, 0.0)
    gl.Rotatef(0.0, 0.0, 0.0, 1.0) // I'm not sure what this does...
    gl.BindTexture(gl.TEXTURE_2D, texture)
    gl.Scalef(width/2.0, height/2.0, 0.0) // Am I doing this right???
	gl.Color4f(1.0, 1.0, 1.0, 1.0)

    gl.Begin(gl.QUADS)
	gl.Normal3f(0.0, 0.0, 0.0)
    gl.TexCoord2d(0.0D, 0.0D)
    gl.Vertex2f(-1.0, 1.0)
    gl.TexCoord2d(1.0D, 0.0D)
    gl.Vertex2f(1.0, 1.0)
    gl.TexCoord2d(1.0D, 1.0D)
    gl.Vertex2f(1.0, -1.0)
    gl.TexCoord2d(0.0D, 1.0D)
    gl.Vertex2f(-1.0, -1.0)
    gl.End()
}
